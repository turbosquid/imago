cthulhu:
  chart: ts-deployment/cthulhu
  appName: "imago"
  proxy: "nginx-proxy:1.2.1"
  imagePullPolicy: IfNotPresent
  containerHost: "docker.hero3d.net"
  imageBasePath: "docker.hero3d.net/deployments/"
  appPort: "8080"
  configPalEnvironment: "qa"
  configPalTlc:  "imago"
  configPalServers:  "zookeeper.qa.hero3d.net:2181"
  configPalOrgServers:  "zookeeper.qa.hero3d.net:2181"
  useWorkerNodes: false
  includeResqueWeb: true
  includePrometheusExporter: true
  includeIngress: true
  ingressClass: "ingress-internal-ts"
  appDomain: "qa.hero3d.net"
  # migrateCommand: ["script/migrate"]
  preStopCommand: "sleep 10; kill -3 1"
  envars:
    - name: UNICORN_PORT
      value: "8080"
    - name: UNICORN_WORKERS
      value: "4"
    - name: UNICORN_SOCKET_PATH
      value: "/shared/unicorn.sock"
  commonEnvars:
    - name: RAILS_ENV
      value: production
  resources:
      requests:
          memory: 4Gi
          cpu: 1
      limits:
          memory: 4Gi
          cpu: 16
  pdbMinAvailable: "75%"
  hpaConfig:
    minReplicas: 4
    maxReplicas: 50
    targetCPUUtilizationPercentage: 25

  # Extra services
  extraServices:
    - name: "shell"
      command: ["/bin/bash", "-c", "while true; do sleep 60; done"]
      resources:
        requests:
          memory: 1Gi
          cpu: 500m
        limits:
          memory: 1Gi
          cpu: 3
      recreate: false  # If true, recreate, do not do a rolling redeploy
      workerOnly: false # Only deploy on  worker node
    - name: "resque"
      command: ["/bin/bash", "-c", "while true; do sleep 60; done"]
      # command: ["script/resque-worker"]
      envars:
        - name: QUEUE
          value: '*'
        - name: COUNT
          value: '4'
      resources:
        requests:
          memory: 1Gi
          cpu: 500m
        limits:
          memory: 1Gi
          cpu: 4
      recreate: false  # If true, recreate, do not do a rolling redeploy
      workerOnly: false # Only deploy on  worker node
